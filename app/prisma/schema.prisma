generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/accelerator_platform/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
  FOUNDER
  EXPERT
  TEAM_MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(FOUNDER)
  bio           String?
  skills        String[]  @default([])
  openToTeam    Boolean   @default(false) // For team matching
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  ownedProjects    Project[]      @relation("ProjectOwner")
  teamMemberships  TeamMembership[]
  comments         Comment[]
  dailyUpdates     DailyUpdate[]
  availabilitySlots AvailabilitySlot[]
  bookedSessions   BookedSession[] @relation("BookedSessions")
  sessionAttendees SessionAttendee[] @relation("SessionAttendees")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                    String         @id @default(cuid())
  name                  String
  description           String         @db.Text
  pointA                String         @db.Text // Current state
  pointB                String         @db.Text // 2-week goal
  status                ProjectStatus  @default(ACTIVE)
  openToTeamMembers     Boolean        @default(false)
  startDate             DateTime       @default(now())
  endDate               DateTime?      // 2 weeks from start
  founderId             String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  founder         User             @relation("ProjectOwner", fields: [founderId], references: [id], onDelete: Cascade)
  teamMembers     TeamMembership[]
  dailyUpdates    DailyUpdate[]
  comments        Comment[]
  bookedSessions  BookedSession[]
}

model TeamMembership {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String   @default("Team Member") // Could be "Team Member", "Co-founder", etc.
  joinedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model DailyUpdate {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  day         Int      // Day number (1-14 for 2 weeks)
  date        DateTime @default(now())
  
  // Structured daily update fields
  wantToDoToday   String?  @db.Text
  whatDid         String?  @db.Text
  challenges      String?  @db.Text // Optional
  nextSteps       String?  @db.Text // Optional
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, day]) // One update per day per project
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Calendar and Booking Models
model AvailabilitySlot {
  id          String   @id @default(cuid())
  userId      String   // Expert or team member who sets availability
  title       String   @default("Available")
  startTime   DateTime
  endTime     DateTime
  isRecurring Boolean  @default(false)
  maxBookings Int      @default(1) // How many people can book this slot
  description String?  @db.Text
  meetingLink String?  // Video call link
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookedSessions BookedSession[]
}

model BookedSession {
  id               String   @id @default(cuid())
  availabilitySlotId String
  bookedByUserId   String   // Who booked the session
  projectId        String?  // Optional - if related to a specific project
  title            String
  description      String?  @db.Text
  startTime        DateTime
  endTime          DateTime
  meetingLink      String?  // Generated meeting room link
  status           SessionStatus @default(SCHEDULED)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  availabilitySlot AvailabilitySlot @relation(fields: [availabilitySlotId], references: [id], onDelete: Cascade)
  bookedBy         User            @relation("BookedSessions", fields: [bookedByUserId], references: [id], onDelete: Cascade)
  project          Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  attendees        SessionAttendee[]
}

model SessionAttendee {
  id              String   @id @default(cuid())
  sessionId       String
  userId          String
  status          AttendeeStatus @default(INVITED)
  joinedAt        DateTime?
  leftAt          DateTime?
  createdAt       DateTime @default(now())

  session BookedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User          @relation("SessionAttendees", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AttendeeStatus {
  INVITED
  ACCEPTED
  DECLINED
  JOINED
  LEFT
}
